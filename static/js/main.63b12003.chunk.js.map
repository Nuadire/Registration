{"version":3,"sources":["_helpers/history.js","_actions/actions.js","_reducers/authentication.reducer.js","_reducers/registration.reducer.js","_reducers/alert.reducer.js","_reducers/index.js","_helpers/store.js","_components/PrivateRoute.jsx","_services/user.service.js","_constants/common.constants.js","_actions/user.actions.js","HomePage/HomePage.jsx","LoginPage/LoginPage.jsx","RegisterPage/RegisterPage.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["history","createBrowserHistory","userRegisterRequest","createAction","userRegisterSuccess","userRegisterFailure","userLoginRequest","userLoginSuccess","userLoginFailure","userLogout","alertSuccess","alertError","alertClear","user","JSON","parse","localStorage","getItem","initialState","loggedIn","authentication","handleActions","state","loggingIn","payload","registration","registering","alert","type","message","Object","keys","reduce","acc","key","row","join","trim","rootReducer","combineReducers","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","PrivateRoute","Component","component","rest","render","props","to","pathname","from","location","logout","removeItem","handleResponse","response","text","then","data","ok","status","window","reload","error","errors","statusText","Promise","reject","userService","login","email","password","requestOptions","method","headers","body","stringify","toLowerCase","fetch","setItem","register","redirect","userActions","dispatch","a","push","connectedHomePage","connect","username","onClick","layout","labelCol","span","wrapperCol","tailLayout","offset","LoginPage","name","onFinish","className","Item","label","rules","required","Password","htmlType","loading","defaultProps","actionCreators","connectedLoginPage","RegisterPage","connectedRegisterPage","App","listen","clearAlerts","this","exact","path","HomePage","React","connectedApp","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","unregister","catch","console"],"mappings":"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","file":"static/js/main.63b12003.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import { createAction } from \"redux-actions\";\r\n\r\nexport const userRegisterRequest = createAction(\"USERS_REGISTER_REQUEST\");\r\nexport const userRegisterSuccess = createAction(\"USERS_REGISTER_SUCCESS\");\r\nexport const userRegisterFailure = createAction(\"USERS_REGISTER_FAILURE\");\r\nexport const userLoginRequest = createAction(\"USERS_LOGIN_REQUEST\");\r\nexport const userLoginSuccess = createAction(\"USERS_LOGIN_SUCCESS\");\r\nexport const userLoginFailure = createAction(\"USERS_LOGIN_FAILURE\");\r\nexport const userLogout = createAction(\"USERS_LOGOUT\");\r\nexport const alertSuccess = createAction(\"ALERT_SUCCESS\");\r\nexport const alertError = createAction(\"ALERT_ERROR\");\r\nexport const alertClear = createAction(\"ALERT_CLEAR\");","import { handleActions } from 'redux-actions';\r\nimport {\r\n  userLoginSuccess,\r\n  userLoginFailure,\r\n  userLoginRequest,\r\n  userLogout,\r\n} from \"../_actions/actions\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\nconst initialState = user ? { loggedIn: true, user } : {};\r\nexport const authentication = handleActions(\r\n  {\r\n    [userLoginRequest]: (state, { payload }) => ({\r\n      loggingIn: true,\r\n      user: payload,\r\n    }),\r\n    [userLoginSuccess]: (state, { payload }) => ({\r\n      loggingIn: true,\r\n      user: payload,\r\n    }),\r\n    [userLoginFailure]: () => ({}),\r\n    [userLogout]: () => ({}),\r\n  },\r\n  initialState\r\n);\r\n","import { handleActions } from \"redux-actions\";\r\nimport {\r\n  userRegisterRequest,\r\n  userRegisterSuccess,\r\n  userRegisterFailure,\r\n} from \"../_actions/actions\";\r\n\r\nexport const registration = handleActions(\r\n  {\r\n    [userRegisterRequest]: () => ({\r\n      registering: true,\r\n    }),\r\n    [userRegisterSuccess]: () => ({}),\r\n    [userRegisterFailure]: () => ({}),\r\n  },\r\n  {}\r\n);","import { handleActions } from \"redux-actions\";\r\nimport { alertSuccess, alertError, alertClear } from \"../_actions/actions\";\r\n\r\nexport const alert = handleActions(\r\n  {\r\n    [alertSuccess]: (state, { payload }) => {\r\n      return {\r\n        type: \"success\",\r\n        message: payload,\r\n      };\r\n    },\r\n    [alertError]: (state, { payload }) => {\r\n      const errorsKeys = Object.keys(payload);\r\n      const newMessage = errorsKeys.reduce((acc, key) => {\r\n        const row = payload[key].join(\", \");\r\n        return `${acc} ${key} ${row}\\n`;\r\n      }, \"\").trim();\r\n      return {\r\n        type: \"error\",\r\n        message: newMessage,\r\n      };\r\n    },\r\n    [alertClear]: () => {\r\n      return {};\r\n    },\r\n  },\r\n  {}\r\n);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { authentication } from './authentication.reducer';\r\nimport { registration } from './registration.reducer';\r\nimport { alert } from './alert.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  authentication,\r\n  registration,\r\n  alert\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from '../_reducers';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);","/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        localStorage.getItem('user')\r\n            ? <Component {...props} />\r\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n    )} />\r\n)\r\n\r\nexport {PrivateRoute};","import { URL } from \"../_constants\";\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"user\");\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout();\r\n        window.location.reload(true); // обновление полное (начиная с сервера)\r\n      }\r\n\r\n      const error = (data && data.errors) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n};\r\n\r\nfunction login(email, password) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ user: { email:email.toLowerCase(), password } }),\r\n  };\r\n  return fetch(`${URL}users/login`, requestOptions)\r\n    .then(handleResponse)\r\n    .then((user) => {\r\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n\r\n      return user;\r\n    });\r\n}\r\n\r\nfunction register(user) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(user),\r\n    redirect: \"follow\",\r\n  };\r\n  return fetch(`${URL}users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nexport const userService = {\r\n  login,\r\n  logout,\r\n  register,\r\n};\r\n","export const URL =  \"https://conduit.productionready.io/api/\";","import { userService } from \"../_services\";\r\nimport { history } from \"../_helpers\";\r\nimport {\r\n  alertSuccess,\r\n  alertError,\r\n  userRegisterRequest,\r\n  userRegisterSuccess,\r\n  userRegisterFailure,\r\n  userLogout,\r\n  userLoginRequest,\r\n  userLoginSuccess,\r\n  userLoginFailure,\r\n} from \"./actions\";\r\n\r\nconst login = (email, password) => async (dispatch) => {\r\n  dispatch(userLoginRequest());\r\n  try {\r\n    const user = await userService.login(email, password);\r\n    dispatch(userLoginSuccess(user));\r\n    history.push(\"/\");\r\n  } catch (error) {\r\n    dispatch(userLoginFailure(error));\r\n    dispatch(alertError(error));\r\n  }\r\n};\r\n\r\nconst logout = () => {\r\n  userService.logout();\r\n  return userLogout();\r\n};\r\n\r\nconst register = (user) => async (dispatch) => {\r\n  dispatch(userRegisterRequest(user));\r\n  try {\r\n    await userService.register(user);\r\n    dispatch(userRegisterSuccess(user));\r\n    history.push(\"/login\");\r\n    dispatch(alertSuccess(\"Registration successful\"));\r\n  } catch (error) {\r\n    dispatch(userRegisterFailure(error));\r\n    dispatch(alertError(error));\r\n  }\r\n};\r\n\r\nexport const userActions = {\r\n  login,\r\n  logout,\r\n  register,\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userActions } from \"../_actions\";\r\n\r\nconst HomePage = ({ user, logout }) => (\r\n  <>\r\n    <h1>Hi {user.username}!</h1>\r\n    <p>\r\n      <Link to=\"/login\" onClick={logout}>\r\n        Logout\r\n      </Link>\r\n    </p>\r\n  </>\r\n);\r\n\r\nHomePage.propTypes = {\r\n  user: PropTypes.shape({ username: PropTypes.string }).isRequired,\r\n  logout: PropTypes.func.isRequired\r\n};\r\n\r\nfunction mapState(state) {\r\n  const {\r\n    authentication: { user },\r\n  } = state;\r\n  return user;\r\n}\r\nfunction mapAction() {\r\n  return {\r\n    logout: userActions.logout,\r\n  };\r\n}\r\n\r\nconst connectedHomePage = connect(mapState, mapAction)(HomePage);\r\nexport { connectedHomePage as HomePage };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userActions } from \"../_actions\";\r\nimport \"./LoginPage.css\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\nconst LoginPage = ({ login, loggingIn }) => {\r\n  const onFinish = ({ email, password }) => {\r\n    login(email, password);\r\n  };\r\n\r\n  return (\r\n    <Form {...layout} name=\"basic\" onFinish={onFinish} className=\"login-form\">\r\n      <Form.Item\r\n        name=\"email\"\r\n        label=\"Email\"\r\n        rules={[\r\n          {\r\n            type: \"email\",\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={loggingIn}>\r\n          Login\r\n        </Button>\r\n        <Link className=\"login-form--signup\" to=\"/signup\">\r\n          Registration\r\n        </Link>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nLoginPage.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  loggingIn: PropTypes.bool,\r\n};\r\nLoginPage.defaultProps = {\r\n  loggingIn: false,\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { loggingIn } = state.authentication;\r\n  return { loggingIn };\r\n}\r\n\r\nconst actionCreators = {\r\n  login: userActions.login,\r\n};\r\n\r\nconst connectedLoginPage = connect(mapState, actionCreators)(LoginPage);\r\nexport { connectedLoginPage as LoginPage };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userActions } from \"../_actions\";\r\nimport \"./RegistrationPage.css\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\nconst RegisterPage = ({ register, registering }) => {\r\n  const onFinish = (user) => {\r\n    register({ user });\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      {...layout}\r\n      name=\"basic\"\r\n      onFinish={onFinish}\r\n      className=\"registration-form\"\r\n    >\r\n      <Form.Item\r\n        name=\"username\"\r\n        label=\"Username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"email\"\r\n        label=\"Email\"\r\n        rules={[\r\n          {\r\n            type: \"email\",\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\"\r\n        loading={registering}\r\n        >\r\n          Register\r\n        </Button>\r\n        <Link to=\"/login\" className=\"registration-form--signup\">\r\n          Cancel\r\n        </Link>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nRegisterPage.propTypes = {\r\n  register: PropTypes.func.isRequired,\r\n  registering: PropTypes.bool,\r\n};\r\nRegisterPage.defaultProps = {\r\n  registering: false\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { registering } = state.registration;\r\n  return { registering };\r\n}\r\n\r\nconst actionCreators = {\r\n  register: userActions.register,\r\n};\r\n\r\nconst connectedRegisterPage = connect(mapState, actionCreators)(RegisterPage);\r\nexport { connectedRegisterPage as RegisterPage };\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Alert } from 'antd';\r\nimport { history } from \"../_helpers\";\r\nimport { alertClear } from \"../_actions/actions\";\r\nimport { PrivateRoute } from \"../_components\";\r\nimport { HomePage } from \"../HomePage\";\r\nimport { LoginPage } from \"../LoginPage\";\r\nimport { RegisterPage } from \"../RegisterPage\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    history.listen(() => {\r\n      // eslint-disable-next-line react/destructuring-assignment\r\n      this.props.clearAlerts();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { alert } = this.props;\r\n    return (\r\n      <div className=\"app\">\r\n            {alert.message && (\r\n              <Alert type={alert.type} message={alert.message} />\r\n            )}\r\n            <Router history={history}>\r\n              <Switch>\r\n                <PrivateRoute exact path=\"/\" component={HomePage} />\r\n                <Route exact path=\"/login\" component={LoginPage} />\r\n                <Route exact path=\"/signup\" component={RegisterPage} />\r\n              </Switch>\r\n            </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  clearAlerts: PropTypes.func.isRequired,\r\n  alert: PropTypes.objectOf(PropTypes.string).isRequired\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { alert } = state;\r\n  return { alert };\r\n}\r\n\r\nconst actionCreators = {\r\n  clearAlerts: alertClear,\r\n};\r\n\r\nconst connectedApp = connect(mapState, actionCreators)(App);\r\nexport { connectedApp as App };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./_helpers\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}