{"version":3,"sources":["_actions/actions.js","_reducers/authentication.reducer.js","_reducers/registration.reducer.js","_reducers/alert.reducer.js","_reducers/index.js","_helpers/store.js","_components/PrivateRoute.jsx","HomePage/HomePage.jsx","_constants/routs.constants.js","_services/user.service.js","_actions/user.actions.js","LoginPage/LoginPage.jsx","RegisterPage/RegisterPage.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["userRegisterRequest","createAction","userRegisterSuccess","userRegisterFailure","userLoginRequest","userLoginSuccess","userLoginFailure","userLogout","alertSuccess","alertError","alertClear","user","JSON","parse","localStorage","getItem","initialState","loggedIn","authentication","handleActions","loggingIn","state","payload","registration","registering","alert","type","message","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunkMiddleware","store","createStore","applyMiddleware","connectedPrivateRoute","connect","privateKey","Component","component","rest","render","props","to","pathname","from","location","connectedHomePage","username","ROUTS","logout","removeItem","handleResponse","response","text","then","data","ok","status","errors","newMessage","Object","keys","reduce","acc","key","row","join","trim","Promise","reject","statusText","userService","login","email","password","requestOptions","method","headers","body","stringify","toLowerCase","fetch","setItem","register","redirect","userActions","redirectToPage","dispatch","a","layout","labelCol","span","wrapperCol","tailLayout","offset","history","push","routHome","LoginPage","onFinish","this","clearAlert","name","className","Item","label","rules","required","Password","htmlType","loading","routSignUp","onClick","React","PureComponent","defaultProps","actionCreators","connectedLoginPage","RegisterPage","routLogin","connectedRegisterPage","App","exact","path","HomePage","connectedApp","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d291b740.chunk.js","sourcesContent":["import { createAction } from \"redux-actions\";\r\n\r\nexport const userRegisterRequest = createAction(\"USERS_REGISTER_REQUEST\");\r\nexport const userRegisterSuccess = createAction(\"USERS_REGISTER_SUCCESS\");\r\nexport const userRegisterFailure = createAction(\"USERS_REGISTER_FAILURE\");\r\nexport const userLoginRequest = createAction(\"USERS_LOGIN_REQUEST\");\r\nexport const userLoginSuccess = createAction(\"USERS_LOGIN_SUCCESS\");\r\nexport const userLoginFailure = createAction(\"USERS_LOGIN_FAILURE\");\r\nexport const userLogout = createAction(\"USERS_LOGOUT\");\r\nexport const alertSuccess = createAction(\"ALERT_SUCCESS\");\r\nexport const alertError = createAction(\"ALERT_ERROR\");\r\nexport const alertClear = createAction(\"ALERT_CLEAR\");","import { handleActions } from 'redux-actions';\r\nimport {\r\n  userLoginSuccess,\r\n  userLoginFailure,\r\n  userLoginRequest,\r\n  userLogout,\r\n} from \"../_actions/actions\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\nconst initialState = user ? { loggedIn: true, user } : {};\r\nexport const authentication = handleActions(\r\n  {\r\n    [userLoginRequest]: () => ({\r\n      loggingIn: true,\r\n    }),\r\n    [userLoginSuccess]: (state, { payload }) => ({\r\n      loggingIn: true,\r\n      user: payload,\r\n    }),\r\n    [userLoginFailure]: () => ({loggingIn: false}),\r\n    [userLogout]: () => ({loggingIn: false}),\r\n  },\r\n  initialState\r\n);\r\n","import { handleActions } from \"redux-actions\";\r\nimport {\r\n  userRegisterRequest,\r\n  userRegisterSuccess,\r\n  userRegisterFailure,\r\n} from \"../_actions/actions\";\r\n\r\nexport const registration = handleActions(\r\n  {\r\n    [userRegisterRequest]: () => ({\r\n      registering: true,\r\n    }),\r\n    [userRegisterSuccess]: () => ({}),\r\n    [userRegisterFailure]: () => ({}),\r\n  },\r\n  {}\r\n);","import { handleActions } from \"redux-actions\";\r\nimport { alertSuccess, alertError, alertClear } from \"../_actions/actions\";\r\n\r\nexport const alert = handleActions(\r\n  {\r\n    [alertSuccess]: (state, { payload }) => ({\r\n      type: \"success\",\r\n      message: payload,\r\n    }),\r\n    [alertError]: (state, { payload }) => ({\r\n      type: \"error\",\r\n      message: payload,\r\n    }),\r\n    [alertClear]: () => ({}),\r\n  },\r\n  {}\r\n);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { authentication } from './authentication.reducer';\r\nimport { registration } from './registration.reducer';\r\nimport { alert } from './alert.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  authentication,\r\n  registration,\r\n  alert\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"../_reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst middleware = [thunkMiddleware];\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst PrivateRoute = ({ component: Component, privateKey, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        privateKey ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const { user } = state.authentication;\r\n  return {privateKey: user};\r\n}\r\n\r\nconst connectedPrivateRoute = connect(mapStateToProps)(PrivateRoute);\r\n\r\nexport { connectedPrivateRoute as PrivateRoute };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst HomePage = ({ user }) => (\r\n  <>\r\n    <h1>Hi {user.username}!</h1>\r\n    <p>\r\n      <Link to=\"/login\">\r\n        Logout\r\n      </Link>\r\n    </p>\r\n  </>\r\n);\r\n\r\nHomePage.propTypes = {\r\n  user: PropTypes.shape({ username: PropTypes.string }).isRequired,\r\n};\r\n\r\nfunction mapState(state) {\r\n  const {\r\n    authentication: { user },\r\n  } = state;\r\n  return user;\r\n}\r\n\r\nconst connectedHomePage = connect(mapState)(HomePage);\r\nexport { connectedHomePage as HomePage };\r\n","export const URL =  \"https://conduit.productionready.io/api/\";\r\n\r\nexport const ROUTS = {\r\n  \"routHome\": \"/\",\r\n  \"routLogin\": \"/login\",\r\n  \"routSignUp\": \"/signup\",\r\n  \"login\": `${URL}users/login`,\r\n  \"register\": `${URL}users`\r\n}","import { ROUTS } from \"../_constants\";\r\n\r\nfunction logout() {\r\n  // remove user from local storage to log user out\r\n  localStorage.removeItem(\"user\");\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  return response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        // auto logout if 401 response returned from api\r\n        logout();\r\n      }\r\n\r\n      if (data && data.errors) {\r\n        const errorsKeys = Object.keys(data.errors);\r\n        const newMessage = errorsKeys\r\n          .reduce((acc, key) => {\r\n            const row = data.errors[key].join(\", \");\r\n            return `${acc} ${key} ${row}; `;\r\n          }, \"\")\r\n          .trim();\r\n        return Promise.reject(newMessage);\r\n      }\r\n      if (response.statusText) {\r\n        return Promise.reject(response.statusText);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  });\r\n};\r\n\r\nfunction login(email, password) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ user: { email: email.toLowerCase(), password } }),\r\n  };\r\n  return fetch(ROUTS.login, requestOptions)\r\n    .then(handleResponse)\r\n    .then((user) => {\r\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      return user;\r\n    });\r\n}\r\n\r\nfunction register(user) {\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ user }),\r\n    redirect: \"follow\",\r\n  };\r\n  return fetch(ROUTS.register, requestOptions).then(handleResponse);\r\n}\r\n\r\nexport const userService = {\r\n  login,\r\n  logout,\r\n  register,\r\n};\r\n","import { userService } from \"../_services\";\r\nimport {\r\n  alertSuccess,\r\n  alertError,\r\n  alertClear,\r\n  userRegisterRequest,\r\n  userRegisterSuccess,\r\n  userRegisterFailure,\r\n  userLogout,\r\n  userLoginRequest,\r\n  userLoginSuccess,\r\n  userLoginFailure,\r\n} from \"./actions\";\r\n\r\nconst login = (email, password, redirectToPage) => async (dispatch) => {\r\n  dispatch(userLoginRequest());\r\n  try {\r\n    const user = await userService.login(email, password);\r\n    dispatch(userLoginSuccess(user));\r\n    redirectToPage();\r\n    dispatch(alertClear());\r\n  } catch (error) {\r\n    dispatch(userLoginFailure(error));\r\n    dispatch(alertError(error));\r\n  }\r\n};\r\n\r\nconst logout = () => (dispatch) => {\r\n  userService.logout();\r\n  dispatch(userLogout());\r\n  dispatch(alertClear());\r\n};\r\n\r\nconst register = (user, redirectToPage) => async (dispatch) => {\r\n  dispatch(userRegisterRequest(user));\r\n  try {\r\n    await userService.register(user);\r\n    dispatch(userRegisterSuccess());\r\n    redirectToPage();\r\n    dispatch(alertSuccess(\"Registration successful\"));\r\n  } catch (error) {\r\n    dispatch(userRegisterFailure(error));\r\n    dispatch(alertError(error));\r\n  }\r\n};\r\n\r\nexport const userActions = {\r\n  login,\r\n  logout,\r\n  register,\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userActions } from \"../_actions\";\r\nimport { alertClear } from \"../_actions/actions\";\r\nimport { ROUTS } from \"../_constants\";\r\nimport \"./LoginPage.css\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\nconst redirectToPage = (history) => () => history.push(ROUTS.routHome);\r\n\r\nclass LoginPage extends React.PureComponent {\r\n  componentDidMount() {\r\n    const { logout } = this.props;\r\n    logout();\r\n  }\r\n\r\n  onFinish = ({ email, password }) => {\r\n    const { login, history } = this.props;\r\n    login(email, password, redirectToPage(history));\r\n  };\r\n\r\n  render() {\r\n    const { loggingIn, clearAlert } = this.props;\r\n    return (\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        onFinish={this.onFinish}\r\n        className=\"login-form\"\r\n      >\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[\r\n            {\r\n              type: \"email\",\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your password!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loggingIn}>\r\n            Login\r\n          </Button>\r\n          <Link\r\n            className=\"login-form--signup\"\r\n            to={ROUTS.routSignUp}\r\n            onClick={clearAlert}\r\n          >\r\n            Registration\r\n          </Link>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nLoginPage.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  logout: PropTypes.func.isRequired,\r\n  clearAlert: PropTypes.func.isRequired,\r\n  loggingIn: PropTypes.bool,\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  history: PropTypes.object.isRequired,\r\n};\r\nLoginPage.defaultProps = {\r\n  loggingIn: false,\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { loggingIn } = state.authentication;\r\n  return { loggingIn };\r\n}\r\n\r\nconst actionCreators = {\r\n  login: userActions.login,\r\n  logout: userActions.logout,\r\n  clearAlert: alertClear,\r\n};\r\n\r\nconst connectedLoginPage = connect(mapState, actionCreators)(LoginPage);\r\nexport { connectedLoginPage as LoginPage };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userActions } from \"../_actions\";\r\nimport { ROUTS } from \"../_constants\";\r\nimport \"./RegistrationPage.css\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 8,\r\n  },\r\n};\r\n\r\nconst redirectToPage = (history) => () => history.push(ROUTS.routLogin);\r\n\r\nconst RegisterPage = ({ register, registering, history }) => {\r\n  const onFinish = (user) => {\r\n    register(user, redirectToPage(history));\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      {...layout}\r\n      name=\"basic\"\r\n      onFinish={onFinish}\r\n      className=\"registration-form\"\r\n    >\r\n      <Form.Item\r\n        name=\"username\"\r\n        label=\"Username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"email\"\r\n        label=\"Email\"\r\n        rules={[\r\n          {\r\n            type: \"email\",\r\n            required: true,\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\"\r\n        loading={registering}\r\n        >\r\n          Register\r\n        </Button>\r\n        <Link to=\"/login\" className=\"registration-form--signup\">\r\n          Cancel\r\n        </Link>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nRegisterPage.propTypes = {\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  history: PropTypes.object.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n  registering: PropTypes.bool,\r\n};\r\nRegisterPage.defaultProps = {\r\n  registering: false\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { registering } = state.registration;\r\n  return { registering };\r\n}\r\n\r\nconst actionCreators = {\r\n  register: userActions.register,\r\n};\r\n\r\nconst connectedRegisterPage = connect(mapState, actionCreators)(RegisterPage);\r\nexport { connectedRegisterPage as RegisterPage };\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Alert } from \"antd\";\r\nimport { PrivateRoute } from \"../_components\";\r\nimport { HomePage } from \"../HomePage\";\r\nimport { LoginPage } from \"../LoginPage\";\r\nimport { RegisterPage } from \"../RegisterPage\";\r\nimport { ROUTS } from \"../_constants\";\r\nimport \"./app.css\";\r\n\r\nclass App extends React.PureComponent {\r\n  render() {\r\n    const { alert } = this.props;\r\n    return (\r\n      <div className=\"app\">\r\n        {alert.message && <Alert type={alert.type} message={alert.message} />}\r\n        <HashRouter>\r\n          <Switch>\r\n            <PrivateRoute exact path={ROUTS.routHome} component={HomePage} />\r\n            <Route path={ROUTS.routLogin} component={LoginPage} />\r\n            <Route path={ROUTS.routSignUp} component={RegisterPage} />\r\n          </Switch>\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  alert: PropTypes.objectOf(PropTypes.string).isRequired,\r\n};\r\n\r\nfunction mapState(state) {\r\n  const { alert } = state;\r\n  return { alert };\r\n}\r\n\r\nconst connectedApp = connect(mapState)(App);\r\nexport { connectedApp as App };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./_helpers\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}